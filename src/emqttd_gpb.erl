%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.6
-module(emqttd_gpb).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_ConnectedMessage.ConnAck'/1, 'enum_value_by_symbol_ConnectedMessage.ConnAck'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("emqttd_gpb.hrl").
-include_lib("gpb/include/gpb.hrl").



-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
  case proplists:get_bool(verify, Opts) of
    true -> verify_msg(Msg, Opts);
    false -> ok
  end,
  TrUserData = proplists:get_value(user_data, Opts),
  case Msg of
    #'DisconnectedMessage'{} ->
      e_msg_DisconnectedMessage(Msg, TrUserData);
    #'ConnectedMessage'{} ->
      e_msg_ConnectedMessage(Msg, TrUserData);
    #'EmqttdPresence'{} ->
      e_msg_EmqttdPresence(Msg, TrUserData);
    #'EmqttdMessage'{} ->
      e_msg_EmqttdMessage(Msg, TrUserData)
  end.



e_msg_DisconnectedMessage(Msg, TrUserData) ->
  e_msg_DisconnectedMessage(Msg, <<>>, TrUserData).


e_msg_DisconnectedMessage(#'DisconnectedMessage'{reason
= F1},
    Bin, TrUserData) ->
  if F1 == undefined -> Bin;
    true ->
      begin
        TrF1 = id(F1, TrUserData),
        e_type_string(TrF1, <<Bin/binary, 10>>)
      end
  end.

e_msg_ConnectedMessage(Msg, TrUserData) ->
  e_msg_ConnectedMessage(Msg, <<>>, TrUserData).


e_msg_ConnectedMessage(#'ConnectedMessage'{ip_address =
F1,
  conn_ack = F2, session = F3,
  protocol_version = F4},
    Bin, TrUserData) ->
  B1 = if F1 == undefined -> Bin;
         true ->
           begin
             TrF1 = id(F1, TrUserData),
             e_type_string(TrF1, <<Bin/binary, 10>>)
           end
       end,
  B2 = if F2 == undefined -> B1;
         true ->
           begin
             TrF2 = id(F2, TrUserData),
             'e_enum_ConnectedMessage.ConnAck'(TrF2,
               <<B1/binary, 16>>)
           end
       end,
  B3 = if F3 == undefined -> B2;
         true ->
           begin
             TrF3 = id(F3, TrUserData),
             e_type_bool(TrF3, <<B2/binary, 24>>)
           end
       end,
  if F4 == undefined -> B3;
    true ->
      begin
        TrF4 = id(F4, TrUserData),
        e_type_int32(TrF4, <<B3/binary, 32>>)
      end
  end.

e_msg_EmqttdPresence(Msg, TrUserData) ->
  e_msg_EmqttdPresence(Msg, <<>>, TrUserData).


e_msg_EmqttdPresence(#'EmqttdPresence'{username = F1,
  client_id = F2, time = F3,
  presence = F4},
    Bin, TrUserData) ->
  B1 = if F1 == undefined -> Bin;
         true ->
           begin
             TrF1 = id(F1, TrUserData),
             e_type_string(TrF1, <<Bin/binary, 10>>)
           end
       end,
  B2 = if F2 == undefined -> B1;
         true ->
           begin
             TrF2 = id(F2, TrUserData),
             e_type_string(TrF2, <<B1/binary, 18>>)
           end
       end,
  B3 = if F3 == undefined -> B2;
         true ->
           begin
             TrF3 = id(F3, TrUserData),
             e_type_int64(TrF3, <<B2/binary, 24>>)
           end
       end,
  case F4 of
    undefined -> B3;
    {connected_message, OF4} ->
      begin
        TrOF4 = id(OF4, TrUserData),
        e_mfield_EmqttdPresence_connected_message(TrOF4,
          <<B3/binary, 34>>,
          TrUserData)
      end;
    {disconnected_message, OF4} ->
      begin
        TrOF4 = id(OF4, TrUserData),
        e_mfield_EmqttdPresence_disconnected_message(TrOF4,
          <<B3/binary, 42>>,
          TrUserData)
      end
  end.

e_msg_EmqttdMessage(Msg, TrUserData) ->
  e_msg_EmqttdMessage(Msg, <<>>, TrUserData).


e_msg_EmqttdMessage(#'EmqttdMessage'{username = F1,
  client_id = F2, topic = F3, qos = F4,
  retain = F5, dup = F6, id = F7,
  payload = F8},
    Bin, TrUserData) ->
  B1 = if F1 == undefined -> Bin;
         true ->
           begin
             TrF1 = id(F1, TrUserData),
             e_type_string(TrF1, <<Bin/binary, 10>>)
           end
       end,
  B2 = if F2 == undefined -> B1;
         true ->
           begin
             TrF2 = id(F2, TrUserData),
             e_type_string(TrF2, <<B1/binary, 18>>)
           end
       end,
  B3 = if F3 == undefined -> B2;
         true ->
           begin
             TrF3 = id(F3, TrUserData),
             e_type_string(TrF3, <<B2/binary, 26>>)
           end
       end,
  B4 = if F4 == undefined -> B3;
         true ->
           begin
             TrF4 = id(F4, TrUserData),
             e_type_int32(TrF4, <<B3/binary, 32>>)
           end
       end,
  B5 = if F5 == undefined -> B4;
         true ->
           begin
             TrF5 = id(F5, TrUserData),
             e_type_bool(TrF5, <<B4/binary, 40>>)
           end
       end,
  B6 = if F6 == undefined -> B5;
         true ->
           begin
             TrF6 = id(F6, TrUserData),
             e_type_bool(TrF6, <<B5/binary, 48>>)
           end
       end,
  B7 = if F7 == undefined -> B6;
         true ->
           begin
             TrF7 = id(F7, TrUserData),
             e_type_int32(TrF7, <<B6/binary, 56>>)
           end
       end,
  if F8 == undefined -> B7;
    true ->
      begin
        TrF8 = id(F8, TrUserData),
        e_type_bytes(TrF8, <<B7/binary, 66>>)
      end
  end.

e_mfield_EmqttdPresence_connected_message(Msg, Bin,
    TrUserData) ->
  SubBin = e_msg_ConnectedMessage(Msg, <<>>, TrUserData),
  Bin2 = e_varint(byte_size(SubBin), Bin),
  <<Bin2/binary, SubBin/binary>>.

e_mfield_EmqttdPresence_disconnected_message(Msg, Bin,
    TrUserData) ->
  SubBin = e_msg_DisconnectedMessage(Msg, <<>>,
    TrUserData),
  Bin2 = e_varint(byte_size(SubBin), Bin),
  <<Bin2/binary, SubBin/binary>>.



'e_enum_ConnectedMessage.ConnAck'('CONNACK_ACCEPT',
    Bin) ->
  <<Bin/binary, 0>>;
'e_enum_ConnectedMessage.ConnAck'('CONNACK_PROTO_VER',
    Bin) ->
  <<Bin/binary, 1>>;
'e_enum_ConnectedMessage.ConnAck'('CONNACK_INVALID_ID',
    Bin) ->
  <<Bin/binary, 2>>;
'e_enum_ConnectedMessage.ConnAck'('CONNACK_SERVER',
    Bin) ->
  <<Bin/binary, 3>>;
'e_enum_ConnectedMessage.ConnAck'('CONNACK_CREDENTIALS',
    Bin) ->
  <<Bin/binary, 4>>;
'e_enum_ConnectedMessage.ConnAck'('CONNACK_AUTH',
    Bin) ->
  <<Bin/binary, 5>>;
'e_enum_ConnectedMessage.ConnAck'(V, Bin) ->
  e_varint(V, Bin).

e_type_int32(Value, Bin)
  when 0 =< Value, Value =< 127 ->
  <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
  <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
  e_varint(N, Bin).

e_type_int64(Value, Bin)
  when 0 =< Value, Value =< 127 ->
  <<Bin/binary, Value>>;
e_type_int64(Value, Bin) ->
  <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
  e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
  Utf8 = unicode:characters_to_binary(S),
  Bin2 = e_varint(byte_size(Utf8), Bin),
  <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
  Bin2 = e_varint(byte_size(Bytes), Bin),
  <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
  BytesBin = iolist_to_binary(Bytes),
  Bin2 = e_varint(byte_size(BytesBin), Bin),
  <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
  Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
  e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
  decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
  TrUserData = proplists:get_value(user_data, Opts),
  case MsgName of
    'DisconnectedMessage' ->
      d_msg_DisconnectedMessage(Bin, TrUserData);
    'ConnectedMessage' ->
      d_msg_ConnectedMessage(Bin, TrUserData);
    'EmqttdPresence' ->
      d_msg_EmqttdPresence(Bin, TrUserData);
    'EmqttdMessage' -> d_msg_EmqttdMessage(Bin, TrUserData)
  end.



d_msg_DisconnectedMessage(Bin, TrUserData) ->
  dfp_read_field_def_DisconnectedMessage(Bin, 0, 0,
    id(undefined, TrUserData),
    TrUserData).

dfp_read_field_def_DisconnectedMessage(<<10,
  Rest/binary>>,
    Z1, Z2, F1, TrUserData) ->
  d_field_DisconnectedMessage_reason(Rest, Z1, Z2, F1,
    TrUserData);
dfp_read_field_def_DisconnectedMessage(<<>>, 0, 0, F1,
    _) ->
  #'DisconnectedMessage'{reason = F1};
dfp_read_field_def_DisconnectedMessage(Other, Z1, Z2,
    F1, TrUserData) ->
  dg_read_field_def_DisconnectedMessage(Other, Z1, Z2, F1,
    TrUserData).

dg_read_field_def_DisconnectedMessage(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, TrUserData)
  when N < 32 - 7 ->
  dg_read_field_def_DisconnectedMessage(Rest, N + 7,
    X bsl N + Acc, F1, TrUserData);
dg_read_field_def_DisconnectedMessage(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, F1, TrUserData) ->
  Key = X bsl N + Acc,
  case Key of
    10 ->
      d_field_DisconnectedMessage_reason(Rest, 0, 0, F1,
        TrUserData);
    _ ->
      case Key band 7 of
        0 ->
          skip_varint_DisconnectedMessage(Rest, 0, 0, F1,
            TrUserData);
        1 ->
          skip_64_DisconnectedMessage(Rest, 0, 0, F1, TrUserData);
        2 ->
          skip_length_delimited_DisconnectedMessage(Rest, 0, 0,
            F1, TrUserData);
        5 ->
          skip_32_DisconnectedMessage(Rest, 0, 0, F1, TrUserData)
      end
  end;
dg_read_field_def_DisconnectedMessage(<<>>, 0, 0, F1,
    _) ->
  #'DisconnectedMessage'{reason = F1}.

d_field_DisconnectedMessage_reason(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, TrUserData)
  when N < 57 ->
  d_field_DisconnectedMessage_reason(Rest, N + 7,
    X bsl N + Acc, F1, TrUserData);
d_field_DisconnectedMessage_reason(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, _, TrUserData) ->
  Len = X bsl N + Acc,
  <<Utf8:Len/binary, Rest2/binary>> = Rest,
  NewFValue = unicode:characters_to_list(Utf8, unicode),
  dfp_read_field_def_DisconnectedMessage(Rest2, 0, 0,
    NewFValue, TrUserData).


skip_varint_DisconnectedMessage(<<1:1, _:7,
  Rest/binary>>,
    Z1, Z2, F1, TrUserData) ->
  skip_varint_DisconnectedMessage(Rest, Z1, Z2, F1,
    TrUserData);
skip_varint_DisconnectedMessage(<<0:1, _:7,
  Rest/binary>>,
    Z1, Z2, F1, TrUserData) ->
  dfp_read_field_def_DisconnectedMessage(Rest, Z1, Z2, F1,
    TrUserData).


skip_length_delimited_DisconnectedMessage(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, TrUserData)
  when N < 57 ->
  skip_length_delimited_DisconnectedMessage(Rest, N + 7,
    X bsl N + Acc, F1, TrUserData);
skip_length_delimited_DisconnectedMessage(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, F1, TrUserData) ->
  Length = X bsl N + Acc,
  <<_:Length/binary, Rest2/binary>> = Rest,
  dfp_read_field_def_DisconnectedMessage(Rest2, 0, 0, F1,
    TrUserData).


skip_32_DisconnectedMessage(<<_:32, Rest/binary>>, Z1,
    Z2, F1, TrUserData) ->
  dfp_read_field_def_DisconnectedMessage(Rest, Z1, Z2, F1,
    TrUserData).


skip_64_DisconnectedMessage(<<_:64, Rest/binary>>, Z1,
    Z2, F1, TrUserData) ->
  dfp_read_field_def_DisconnectedMessage(Rest, Z1, Z2, F1,
    TrUserData).


d_msg_ConnectedMessage(Bin, TrUserData) ->
  dfp_read_field_def_ConnectedMessage(Bin, 0, 0,
    id(undefined, TrUserData),
    id(undefined, TrUserData),
    id(undefined, TrUserData),
    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ConnectedMessage(<<10, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
  d_field_ConnectedMessage_ip_address(Rest, Z1, Z2, F1,
    F2, F3, F4, TrUserData);
dfp_read_field_def_ConnectedMessage(<<16, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
  d_field_ConnectedMessage_conn_ack(Rest, Z1, Z2, F1, F2,
    F3, F4, TrUserData);
dfp_read_field_def_ConnectedMessage(<<24, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
  d_field_ConnectedMessage_session(Rest, Z1, Z2, F1, F2,
    F3, F4, TrUserData);
dfp_read_field_def_ConnectedMessage(<<32, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
  d_field_ConnectedMessage_protocol_version(Rest, Z1, Z2,
    F1, F2, F3, F4, TrUserData);
dfp_read_field_def_ConnectedMessage(<<>>, 0, 0, F1, F2,
    F3, F4, _) ->
  #'ConnectedMessage'{ip_address = F1, conn_ack = F2,
    session = F3, protocol_version = F4};
dfp_read_field_def_ConnectedMessage(Other, Z1, Z2, F1,
    F2, F3, F4, TrUserData) ->
  dg_read_field_def_ConnectedMessage(Other, Z1, Z2, F1,
    F2, F3, F4, TrUserData).

dg_read_field_def_ConnectedMessage(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData)
  when N < 32 - 7 ->
  dg_read_field_def_ConnectedMessage(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, F4,
    TrUserData);
dg_read_field_def_ConnectedMessage(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData) ->
  Key = X bsl N + Acc,
  case Key of
    10 ->
      d_field_ConnectedMessage_ip_address(Rest, 0, 0, F1, F2,
        F3, F4, TrUserData);
    16 ->
      d_field_ConnectedMessage_conn_ack(Rest, 0, 0, F1, F2,
        F3, F4, TrUserData);
    24 ->
      d_field_ConnectedMessage_session(Rest, 0, 0, F1, F2, F3,
        F4, TrUserData);
    32 ->
      d_field_ConnectedMessage_protocol_version(Rest, 0, 0,
        F1, F2, F3, F4, TrUserData);
    _ ->
      case Key band 7 of
        0 ->
          skip_varint_ConnectedMessage(Rest, 0, 0, F1, F2, F3, F4,
            TrUserData);
        1 ->
          skip_64_ConnectedMessage(Rest, 0, 0, F1, F2, F3, F4,
            TrUserData);
        2 ->
          skip_length_delimited_ConnectedMessage(Rest, 0, 0, F1,
            F2, F3, F4, TrUserData);
        5 ->
          skip_32_ConnectedMessage(Rest, 0, 0, F1, F2, F3, F4,
            TrUserData)
      end
  end;
dg_read_field_def_ConnectedMessage(<<>>, 0, 0, F1, F2,
    F3, F4, _) ->
  #'ConnectedMessage'{ip_address = F1, conn_ack = F2,
    session = F3, protocol_version = F4}.

d_field_ConnectedMessage_ip_address(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData)
  when N < 57 ->
  d_field_ConnectedMessage_ip_address(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, F4,
    TrUserData);
d_field_ConnectedMessage_ip_address(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, _, F2, F3, F4, TrUserData) ->
  Len = X bsl N + Acc,
  <<Utf8:Len/binary, Rest2/binary>> = Rest,
  NewFValue = unicode:characters_to_list(Utf8, unicode),
  dfp_read_field_def_ConnectedMessage(Rest2, 0, 0,
    NewFValue, F2, F3, F4, TrUserData).


d_field_ConnectedMessage_conn_ack(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData)
  when N < 57 ->
  d_field_ConnectedMessage_conn_ack(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, F4,
    TrUserData);
d_field_ConnectedMessage_conn_ack(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, F1, _, F3, F4, TrUserData) ->
  <<Tmp:32/signed-native>> = <<(X bsl N +
    Acc):32/unsigned-native>>,
  NewFValue = 'd_enum_ConnectedMessage.ConnAck'(Tmp),
  dfp_read_field_def_ConnectedMessage(Rest, 0, 0, F1,
    NewFValue, F3, F4, TrUserData).


d_field_ConnectedMessage_session(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData)
  when N < 57 ->
  d_field_ConnectedMessage_session(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_ConnectedMessage_session(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, _, F4, TrUserData) ->
  NewFValue = X bsl N + Acc =/= 0,
  dfp_read_field_def_ConnectedMessage(Rest, 0, 0, F1, F2,
    NewFValue, F4, TrUserData).


d_field_ConnectedMessage_protocol_version(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData)
  when N < 57 ->
  d_field_ConnectedMessage_protocol_version(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, F4,
    TrUserData);
d_field_ConnectedMessage_protocol_version(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, _, TrUserData) ->
  <<NewFValue:32/signed-native>> = <<(X bsl N +
    Acc):32/unsigned-native>>,
  dfp_read_field_def_ConnectedMessage(Rest, 0, 0, F1, F2,
    F3, NewFValue, TrUserData).


skip_varint_ConnectedMessage(<<1:1, _:7, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
  skip_varint_ConnectedMessage(Rest, Z1, Z2, F1, F2, F3,
    F4, TrUserData);
skip_varint_ConnectedMessage(<<0:1, _:7, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
  dfp_read_field_def_ConnectedMessage(Rest, Z1, Z2, F1,
    F2, F3, F4, TrUserData).


skip_length_delimited_ConnectedMessage(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData)
  when N < 57 ->
  skip_length_delimited_ConnectedMessage(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, F4,
    TrUserData);
skip_length_delimited_ConnectedMessage(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData) ->
  Length = X bsl N + Acc,
  <<_:Length/binary, Rest2/binary>> = Rest,
  dfp_read_field_def_ConnectedMessage(Rest2, 0, 0, F1, F2,
    F3, F4, TrUserData).


skip_32_ConnectedMessage(<<_:32, Rest/binary>>, Z1, Z2,
    F1, F2, F3, F4, TrUserData) ->
  dfp_read_field_def_ConnectedMessage(Rest, Z1, Z2, F1,
    F2, F3, F4, TrUserData).


skip_64_ConnectedMessage(<<_:64, Rest/binary>>, Z1, Z2,
    F1, F2, F3, F4, TrUserData) ->
  dfp_read_field_def_ConnectedMessage(Rest, Z1, Z2, F1,
    F2, F3, F4, TrUserData).


d_msg_EmqttdPresence(Bin, TrUserData) ->
  dfp_read_field_def_EmqttdPresence(Bin, 0, 0,
    id(undefined, TrUserData),
    id(undefined, TrUserData),
    id(undefined, TrUserData),
    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_EmqttdPresence(<<10, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
  d_field_EmqttdPresence_username(Rest, Z1, Z2, F1, F2,
    F3, F4, TrUserData);
dfp_read_field_def_EmqttdPresence(<<18, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
  d_field_EmqttdPresence_client_id(Rest, Z1, Z2, F1, F2,
    F3, F4, TrUserData);
dfp_read_field_def_EmqttdPresence(<<24, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
  d_field_EmqttdPresence_time(Rest, Z1, Z2, F1, F2, F3,
    F4, TrUserData);
dfp_read_field_def_EmqttdPresence(<<34, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
  d_field_EmqttdPresence_connected_message(Rest, Z1, Z2,
    F1, F2, F3, F4, TrUserData);
dfp_read_field_def_EmqttdPresence(<<42, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
  d_field_EmqttdPresence_disconnected_message(Rest, Z1,
    Z2, F1, F2, F3, F4, TrUserData);
dfp_read_field_def_EmqttdPresence(<<>>, 0, 0, F1, F2,
    F3, F4, _) ->
  #'EmqttdPresence'{username = F1, client_id = F2,
    time = F3, presence = F4};
dfp_read_field_def_EmqttdPresence(Other, Z1, Z2, F1, F2,
    F3, F4, TrUserData) ->
  dg_read_field_def_EmqttdPresence(Other, Z1, Z2, F1, F2,
    F3, F4, TrUserData).

dg_read_field_def_EmqttdPresence(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData)
  when N < 32 - 7 ->
  dg_read_field_def_EmqttdPresence(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, F4, TrUserData);
dg_read_field_def_EmqttdPresence(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData) ->
  Key = X bsl N + Acc,
  case Key of
    10 ->
      d_field_EmqttdPresence_username(Rest, 0, 0, F1, F2, F3,
        F4, TrUserData);
    18 ->
      d_field_EmqttdPresence_client_id(Rest, 0, 0, F1, F2, F3,
        F4, TrUserData);
    24 ->
      d_field_EmqttdPresence_time(Rest, 0, 0, F1, F2, F3, F4,
        TrUserData);
    34 ->
      d_field_EmqttdPresence_connected_message(Rest, 0, 0, F1,
        F2, F3, F4, TrUserData);
    42 ->
      d_field_EmqttdPresence_disconnected_message(Rest, 0, 0,
        F1, F2, F3, F4,
        TrUserData);
    _ ->
      case Key band 7 of
        0 ->
          skip_varint_EmqttdPresence(Rest, 0, 0, F1, F2, F3, F4,
            TrUserData);
        1 ->
          skip_64_EmqttdPresence(Rest, 0, 0, F1, F2, F3, F4,
            TrUserData);
        2 ->
          skip_length_delimited_EmqttdPresence(Rest, 0, 0, F1, F2,
            F3, F4, TrUserData);
        5 ->
          skip_32_EmqttdPresence(Rest, 0, 0, F1, F2, F3, F4,
            TrUserData)
      end
  end;
dg_read_field_def_EmqttdPresence(<<>>, 0, 0, F1, F2, F3,
    F4, _) ->
  #'EmqttdPresence'{username = F1, client_id = F2,
    time = F3, presence = F4}.

d_field_EmqttdPresence_username(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData)
  when N < 57 ->
  d_field_EmqttdPresence_username(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_EmqttdPresence_username(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, _, F2, F3, F4, TrUserData) ->
  Len = X bsl N + Acc,
  <<Utf8:Len/binary, Rest2/binary>> = Rest,
  NewFValue = unicode:characters_to_list(Utf8, unicode),
  dfp_read_field_def_EmqttdPresence(Rest2, 0, 0,
    NewFValue, F2, F3, F4, TrUserData).


d_field_EmqttdPresence_client_id(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData)
  when N < 57 ->
  d_field_EmqttdPresence_client_id(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, F4, TrUserData);
d_field_EmqttdPresence_client_id(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, F1, _, F3, F4, TrUserData) ->
  Len = X bsl N + Acc,
  <<Utf8:Len/binary, Rest2/binary>> = Rest,
  NewFValue = unicode:characters_to_list(Utf8, unicode),
  dfp_read_field_def_EmqttdPresence(Rest2, 0, 0, F1,
    NewFValue, F3, F4, TrUserData).


d_field_EmqttdPresence_time(<<1:1, X:7, Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData)
  when N < 57 ->
  d_field_EmqttdPresence_time(Rest, N + 7, X bsl N + Acc,
    F1, F2, F3, F4, TrUserData);
d_field_EmqttdPresence_time(<<0:1, X:7, Rest/binary>>,
    N, Acc, F1, F2, _, F4, TrUserData) ->
  <<NewFValue:64/signed-native>> = <<(X bsl N +
    Acc):64/unsigned-native>>,
  dfp_read_field_def_EmqttdPresence(Rest, 0, 0, F1, F2,
    NewFValue, F4, TrUserData).


d_field_EmqttdPresence_connected_message(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData)
  when N < 57 ->
  d_field_EmqttdPresence_connected_message(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, F4,
    TrUserData);
d_field_EmqttdPresence_connected_message(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData) ->
  Len = X bsl N + Acc,
  <<Bs:Len/binary, Rest2/binary>> = Rest,
  NewFValue = id(d_msg_ConnectedMessage(Bs, TrUserData),
    TrUserData),
  dfp_read_field_def_EmqttdPresence(Rest2, 0, 0, F1, F2,
    F3,
    case F4 of
      undefined ->
        {connected_message, NewFValue};
      {connected_message, MVF4} ->
        {connected_message,
          merge_msg_ConnectedMessage(MVF4,
            NewFValue,
            TrUserData)};
      _ -> {connected_message, NewFValue}
    end,
    TrUserData).


d_field_EmqttdPresence_disconnected_message(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData)
  when N < 57 ->
  d_field_EmqttdPresence_disconnected_message(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, F4,
    TrUserData);
d_field_EmqttdPresence_disconnected_message(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4,
    TrUserData) ->
  Len = X bsl N + Acc,
  <<Bs:Len/binary, Rest2/binary>> = Rest,
  NewFValue = id(d_msg_DisconnectedMessage(Bs,
    TrUserData),
    TrUserData),
  dfp_read_field_def_EmqttdPresence(Rest2, 0, 0, F1, F2,
    F3,
    case F4 of
      undefined ->
        {disconnected_message, NewFValue};
      {disconnected_message, MVF4} ->
        {disconnected_message,
          merge_msg_DisconnectedMessage(MVF4,
            NewFValue,
            TrUserData)};
      _ -> {disconnected_message, NewFValue}
    end,
    TrUserData).


skip_varint_EmqttdPresence(<<1:1, _:7, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
  skip_varint_EmqttdPresence(Rest, Z1, Z2, F1, F2, F3, F4,
    TrUserData);
skip_varint_EmqttdPresence(<<0:1, _:7, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, TrUserData) ->
  dfp_read_field_def_EmqttdPresence(Rest, Z1, Z2, F1, F2,
    F3, F4, TrUserData).


skip_length_delimited_EmqttdPresence(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData)
  when N < 57 ->
  skip_length_delimited_EmqttdPresence(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, F4,
    TrUserData);
skip_length_delimited_EmqttdPresence(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, TrUserData) ->
  Length = X bsl N + Acc,
  <<_:Length/binary, Rest2/binary>> = Rest,
  dfp_read_field_def_EmqttdPresence(Rest2, 0, 0, F1, F2,
    F3, F4, TrUserData).


skip_32_EmqttdPresence(<<_:32, Rest/binary>>, Z1, Z2,
    F1, F2, F3, F4, TrUserData) ->
  dfp_read_field_def_EmqttdPresence(Rest, Z1, Z2, F1, F2,
    F3, F4, TrUserData).


skip_64_EmqttdPresence(<<_:64, Rest/binary>>, Z1, Z2,
    F1, F2, F3, F4, TrUserData) ->
  dfp_read_field_def_EmqttdPresence(Rest, Z1, Z2, F1, F2,
    F3, F4, TrUserData).


d_msg_EmqttdMessage(Bin, TrUserData) ->
  dfp_read_field_def_EmqttdMessage(Bin, 0, 0,
    id(undefined, TrUserData),
    id(undefined, TrUserData),
    id(undefined, TrUserData),
    id(undefined, TrUserData),
    id(undefined, TrUserData),
    id(undefined, TrUserData),
    id(undefined, TrUserData),
    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_EmqttdMessage(<<10, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
    TrUserData) ->
  d_field_EmqttdMessage_username(Rest, Z1, Z2, F1, F2, F3,
    F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_EmqttdMessage(<<18, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
    TrUserData) ->
  d_field_EmqttdMessage_client_id(Rest, Z1, Z2, F1, F2,
    F3, F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_EmqttdMessage(<<26, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
    TrUserData) ->
  d_field_EmqttdMessage_topic(Rest, Z1, Z2, F1, F2, F3,
    F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_EmqttdMessage(<<32, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
    TrUserData) ->
  d_field_EmqttdMessage_qos(Rest, Z1, Z2, F1, F2, F3, F4,
    F5, F6, F7, F8, TrUserData);
dfp_read_field_def_EmqttdMessage(<<40, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
    TrUserData) ->
  d_field_EmqttdMessage_retain(Rest, Z1, Z2, F1, F2, F3,
    F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_EmqttdMessage(<<48, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
    TrUserData) ->
  d_field_EmqttdMessage_dup(Rest, Z1, Z2, F1, F2, F3, F4,
    F5, F6, F7, F8, TrUserData);
dfp_read_field_def_EmqttdMessage(<<56, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
    TrUserData) ->
  d_field_EmqttdMessage_id(Rest, Z1, Z2, F1, F2, F3, F4,
    F5, F6, F7, F8, TrUserData);
dfp_read_field_def_EmqttdMessage(<<66, Rest/binary>>,
    Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
    TrUserData) ->
  d_field_EmqttdMessage_payload(Rest, Z1, Z2, F1, F2, F3,
    F4, F5, F6, F7, F8, TrUserData);
dfp_read_field_def_EmqttdMessage(<<>>, 0, 0, F1, F2, F3,
    F4, F5, F6, F7, F8, _) ->
  #'EmqttdMessage'{username = F1, client_id = F2,
    topic = F3, qos = F4, retain = F5, dup = F6, id = F7,
    payload = F8};
dfp_read_field_def_EmqttdMessage(Other, Z1, Z2, F1, F2,
    F3, F4, F5, F6, F7, F8, TrUserData) ->
  dg_read_field_def_EmqttdMessage(Other, Z1, Z2, F1, F2,
    F3, F4, F5, F6, F7, F8, TrUserData).

dg_read_field_def_EmqttdMessage(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
    TrUserData)
  when N < 32 - 7 ->
  dg_read_field_def_EmqttdMessage(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
    F8, TrUserData);
dg_read_field_def_EmqttdMessage(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
    TrUserData) ->
  Key = X bsl N + Acc,
  case Key of
    10 ->
      d_field_EmqttdMessage_username(Rest, 0, 0, F1, F2, F3,
        F4, F5, F6, F7, F8, TrUserData);
    18 ->
      d_field_EmqttdMessage_client_id(Rest, 0, 0, F1, F2, F3,
        F4, F5, F6, F7, F8, TrUserData);
    26 ->
      d_field_EmqttdMessage_topic(Rest, 0, 0, F1, F2, F3, F4,
        F5, F6, F7, F8, TrUserData);
    32 ->
      d_field_EmqttdMessage_qos(Rest, 0, 0, F1, F2, F3, F4,
        F5, F6, F7, F8, TrUserData);
    40 ->
      d_field_EmqttdMessage_retain(Rest, 0, 0, F1, F2, F3, F4,
        F5, F6, F7, F8, TrUserData);
    48 ->
      d_field_EmqttdMessage_dup(Rest, 0, 0, F1, F2, F3, F4,
        F5, F6, F7, F8, TrUserData);
    56 ->
      d_field_EmqttdMessage_id(Rest, 0, 0, F1, F2, F3, F4, F5,
        F6, F7, F8, TrUserData);
    66 ->
      d_field_EmqttdMessage_payload(Rest, 0, 0, F1, F2, F3,
        F4, F5, F6, F7, F8, TrUserData);
    _ ->
      case Key band 7 of
        0 ->
          skip_varint_EmqttdMessage(Rest, 0, 0, F1, F2, F3, F4,
            F5, F6, F7, F8, TrUserData);
        1 ->
          skip_64_EmqttdMessage(Rest, 0, 0, F1, F2, F3, F4, F5,
            F6, F7, F8, TrUserData);
        2 ->
          skip_length_delimited_EmqttdMessage(Rest, 0, 0, F1, F2,
            F3, F4, F5, F6, F7, F8,
            TrUserData);
        5 ->
          skip_32_EmqttdMessage(Rest, 0, 0, F1, F2, F3, F4, F5,
            F6, F7, F8, TrUserData)
      end
  end;
dg_read_field_def_EmqttdMessage(<<>>, 0, 0, F1, F2, F3,
    F4, F5, F6, F7, F8, _) ->
  #'EmqttdMessage'{username = F1, client_id = F2,
    topic = F3, qos = F4, retain = F5, dup = F6, id = F7,
    payload = F8}.

d_field_EmqttdMessage_username(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
    TrUserData)
  when N < 57 ->
  d_field_EmqttdMessage_username(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
    F8, TrUserData);
d_field_EmqttdMessage_username(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, _, F2, F3, F4, F5, F6, F7, F8,
    TrUserData) ->
  Len = X bsl N + Acc,
  <<Utf8:Len/binary, Rest2/binary>> = Rest,
  NewFValue = unicode:characters_to_list(Utf8, unicode),
  dfp_read_field_def_EmqttdMessage(Rest2, 0, 0, NewFValue,
    F2, F3, F4, F5, F6, F7, F8, TrUserData).


d_field_EmqttdMessage_client_id(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
    TrUserData)
  when N < 57 ->
  d_field_EmqttdMessage_client_id(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
    F8, TrUserData);
d_field_EmqttdMessage_client_id(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, F1, _, F3, F4, F5, F6, F7, F8,
    TrUserData) ->
  Len = X bsl N + Acc,
  <<Utf8:Len/binary, Rest2/binary>> = Rest,
  NewFValue = unicode:characters_to_list(Utf8, unicode),
  dfp_read_field_def_EmqttdMessage(Rest2, 0, 0, F1,
    NewFValue, F3, F4, F5, F6, F7, F8,
    TrUserData).


d_field_EmqttdMessage_topic(<<1:1, X:7, Rest/binary>>,
    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
  when N < 57 ->
  d_field_EmqttdMessage_topic(Rest, N + 7, X bsl N + Acc,
    F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_EmqttdMessage_topic(<<0:1, X:7, Rest/binary>>,
    N, Acc, F1, F2, _, F4, F5, F6, F7, F8,
    TrUserData) ->
  Len = X bsl N + Acc,
  <<Utf8:Len/binary, Rest2/binary>> = Rest,
  NewFValue = unicode:characters_to_list(Utf8, unicode),
  dfp_read_field_def_EmqttdMessage(Rest2, 0, 0, F1, F2,
    NewFValue, F4, F5, F6, F7, F8, TrUserData).


d_field_EmqttdMessage_qos(<<1:1, X:7, Rest/binary>>, N,
    Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
  when N < 57 ->
  d_field_EmqttdMessage_qos(Rest, N + 7, X bsl N + Acc,
    F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_EmqttdMessage_qos(<<0:1, X:7, Rest/binary>>, N,
    Acc, F1, F2, F3, _, F5, F6, F7, F8, TrUserData) ->
  <<NewFValue:32/signed-native>> = <<(X bsl N +
    Acc):32/unsigned-native>>,
  dfp_read_field_def_EmqttdMessage(Rest, 0, 0, F1, F2, F3,
    NewFValue, F5, F6, F7, F8, TrUserData).


d_field_EmqttdMessage_retain(<<1:1, X:7, Rest/binary>>,
    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
  when N < 57 ->
  d_field_EmqttdMessage_retain(Rest, N + 7, X bsl N + Acc,
    F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_EmqttdMessage_retain(<<0:1, X:7, Rest/binary>>,
    N, Acc, F1, F2, F3, F4, _, F6, F7, F8,
    TrUserData) ->
  NewFValue = X bsl N + Acc =/= 0,
  dfp_read_field_def_EmqttdMessage(Rest, 0, 0, F1, F2, F3,
    F4, NewFValue, F6, F7, F8, TrUserData).


d_field_EmqttdMessage_dup(<<1:1, X:7, Rest/binary>>, N,
    Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
  when N < 57 ->
  d_field_EmqttdMessage_dup(Rest, N + 7, X bsl N + Acc,
    F1, F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_EmqttdMessage_dup(<<0:1, X:7, Rest/binary>>, N,
    Acc, F1, F2, F3, F4, F5, _, F7, F8, TrUserData) ->
  NewFValue = X bsl N + Acc =/= 0,
  dfp_read_field_def_EmqttdMessage(Rest, 0, 0, F1, F2, F3,
    F4, F5, NewFValue, F7, F8, TrUserData).


d_field_EmqttdMessage_id(<<1:1, X:7, Rest/binary>>, N,
    Acc, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData)
  when N < 57 ->
  d_field_EmqttdMessage_id(Rest, N + 7, X bsl N + Acc, F1,
    F2, F3, F4, F5, F6, F7, F8, TrUserData);
d_field_EmqttdMessage_id(<<0:1, X:7, Rest/binary>>, N,
    Acc, F1, F2, F3, F4, F5, F6, _, F8, TrUserData) ->
  <<NewFValue:32/signed-native>> = <<(X bsl N +
    Acc):32/unsigned-native>>,
  dfp_read_field_def_EmqttdMessage(Rest, 0, 0, F1, F2, F3,
    F4, F5, F6, NewFValue, F8, TrUserData).


d_field_EmqttdMessage_payload(<<1:1, X:7, Rest/binary>>,
    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
    TrUserData)
  when N < 57 ->
  d_field_EmqttdMessage_payload(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
    TrUserData);
d_field_EmqttdMessage_payload(<<0:1, X:7, Rest/binary>>,
    N, Acc, F1, F2, F3, F4, F5, F6, F7, _,
    TrUserData) ->
  Len = X bsl N + Acc,
  <<Bytes:Len/binary, Rest2/binary>> = Rest,
  NewFValue = binary:copy(Bytes),
  dfp_read_field_def_EmqttdMessage(Rest2, 0, 0, F1, F2,
    F3, F4, F5, F6, F7, NewFValue, TrUserData).


skip_varint_EmqttdMessage(<<1:1, _:7, Rest/binary>>, Z1,
    Z2, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
  skip_varint_EmqttdMessage(Rest, Z1, Z2, F1, F2, F3, F4,
    F5, F6, F7, F8, TrUserData);
skip_varint_EmqttdMessage(<<0:1, _:7, Rest/binary>>, Z1,
    Z2, F1, F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
  dfp_read_field_def_EmqttdMessage(Rest, Z1, Z2, F1, F2,
    F3, F4, F5, F6, F7, F8, TrUserData).


skip_length_delimited_EmqttdMessage(<<1:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
    TrUserData)
  when N < 57 ->
  skip_length_delimited_EmqttdMessage(Rest, N + 7,
    X bsl N + Acc, F1, F2, F3, F4, F5, F6,
    F7, F8, TrUserData);
skip_length_delimited_EmqttdMessage(<<0:1, X:7,
  Rest/binary>>,
    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
    TrUserData) ->
  Length = X bsl N + Acc,
  <<_:Length/binary, Rest2/binary>> = Rest,
  dfp_read_field_def_EmqttdMessage(Rest2, 0, 0, F1, F2,
    F3, F4, F5, F6, F7, F8, TrUserData).


skip_32_EmqttdMessage(<<_:32, Rest/binary>>, Z1, Z2, F1,
    F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
  dfp_read_field_def_EmqttdMessage(Rest, Z1, Z2, F1, F2,
    F3, F4, F5, F6, F7, F8, TrUserData).


skip_64_EmqttdMessage(<<_:64, Rest/binary>>, Z1, Z2, F1,
    F2, F3, F4, F5, F6, F7, F8, TrUserData) ->
  dfp_read_field_def_EmqttdMessage(Rest, Z1, Z2, F1, F2,
    F3, F4, F5, F6, F7, F8, TrUserData).




'd_enum_ConnectedMessage.ConnAck'(0) ->
  'CONNACK_ACCEPT';
'd_enum_ConnectedMessage.ConnAck'(1) ->
  'CONNACK_PROTO_VER';
'd_enum_ConnectedMessage.ConnAck'(2) ->
  'CONNACK_INVALID_ID';
'd_enum_ConnectedMessage.ConnAck'(3) ->
  'CONNACK_SERVER';
'd_enum_ConnectedMessage.ConnAck'(4) ->
  'CONNACK_CREDENTIALS';
'd_enum_ConnectedMessage.ConnAck'(5) -> 'CONNACK_AUTH';
'd_enum_ConnectedMessage.ConnAck'(V) -> V.



merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
  when element(1, Prev) =:= element(1, New) ->
  TrUserData = proplists:get_value(user_data, Opts),
  case Prev of
    #'DisconnectedMessage'{} ->
      merge_msg_DisconnectedMessage(Prev, New, TrUserData);
    #'ConnectedMessage'{} ->
      merge_msg_ConnectedMessage(Prev, New, TrUserData);
    #'EmqttdPresence'{} ->
      merge_msg_EmqttdPresence(Prev, New, TrUserData);
    #'EmqttdMessage'{} ->
      merge_msg_EmqttdMessage(Prev, New, TrUserData)
  end.

merge_msg_DisconnectedMessage(#'DisconnectedMessage'{reason
= PFreason},
    #'DisconnectedMessage'{reason = NFreason}, _) ->
  #'DisconnectedMessage'{reason =
  if NFreason =:= undefined -> PFreason;
    true -> NFreason
  end}.

merge_msg_ConnectedMessage(#'ConnectedMessage'{ip_address
= PFip_address,
  conn_ack = PFconn_ack,
  session = PFsession,
  protocol_version =
  PFprotocol_version},
    #'ConnectedMessage'{ip_address = NFip_address,
      conn_ack = NFconn_ack,
      session = NFsession,
      protocol_version =
      NFprotocol_version},
    _) ->
  #'ConnectedMessage'{ip_address =
  if NFip_address =:= undefined -> PFip_address;
    true -> NFip_address
  end,
    conn_ack =
    if NFconn_ack =:= undefined -> PFconn_ack;
      true -> NFconn_ack
    end,
    session =
    if NFsession =:= undefined -> PFsession;
      true -> NFsession
    end,
    protocol_version =
    if NFprotocol_version =:= undefined ->
      PFprotocol_version;
      true -> NFprotocol_version
    end}.

merge_msg_EmqttdPresence(#'EmqttdPresence'{username =
PFusername,
  client_id = PFclient_id,
  time = PFtime,
  presence = PFpresence},
    #'EmqttdPresence'{username = NFusername,
      client_id = NFclient_id,
      time = NFtime,
      presence = NFpresence},
    TrUserData) ->
  #'EmqttdPresence'{username =
  if NFusername =:= undefined -> PFusername;
    true -> NFusername
  end,
    client_id =
    if NFclient_id =:= undefined -> PFclient_id;
      true -> NFclient_id
    end,
    time =
    if NFtime =:= undefined -> PFtime;
      true -> NFtime
    end,
    presence =
    case {PFpresence, NFpresence} of
      {{connected_message, OPFpresence},
        {connected_message, ONFpresence}} ->
        {connected_message,
          merge_msg_ConnectedMessage(OPFpresence,
            ONFpresence,
            TrUserData)};
      {{disconnected_message, OPFpresence},
        {disconnected_message, ONFpresence}} ->
        {disconnected_message,
          merge_msg_DisconnectedMessage(OPFpresence,
            ONFpresence,
            TrUserData)};
      {_, undefined} -> PFpresence;
      _ -> NFpresence
    end}.

merge_msg_EmqttdMessage(#'EmqttdMessage'{username =
PFusername,
  client_id = PFclient_id,
  topic = PFtopic, qos = PFqos,
  retain = PFretain, dup = PFdup,
  id = PFid, payload = PFpayload},
    #'EmqttdMessage'{username = NFusername,
      client_id = NFclient_id,
      topic = NFtopic, qos = NFqos,
      retain = NFretain, dup = NFdup,
      id = NFid, payload = NFpayload},
    _) ->
  #'EmqttdMessage'{username =
  if NFusername =:= undefined -> PFusername;
    true -> NFusername
  end,
    client_id =
    if NFclient_id =:= undefined -> PFclient_id;
      true -> NFclient_id
    end,
    topic =
    if NFtopic =:= undefined -> PFtopic;
      true -> NFtopic
    end,
    qos =
    if NFqos =:= undefined -> PFqos;
      true -> NFqos
    end,
    retain =
    if NFretain =:= undefined -> PFretain;
      true -> NFretain
    end,
    dup =
    if NFdup =:= undefined -> PFdup;
      true -> NFdup
    end,
    id =
    if NFid =:= undefined -> PFid;
      true -> NFid
    end,
    payload =
    if NFpayload =:= undefined -> PFpayload;
      true -> NFpayload
    end}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
  TrUserData = proplists:get_value(user_data, Opts),
  case Msg of
    #'DisconnectedMessage'{} ->
      v_msg_DisconnectedMessage(Msg, ['DisconnectedMessage'],
        TrUserData);
    #'ConnectedMessage'{} ->
      v_msg_ConnectedMessage(Msg, ['ConnectedMessage'],
        TrUserData);
    #'EmqttdPresence'{} ->
      v_msg_EmqttdPresence(Msg, ['EmqttdPresence'],
        TrUserData);
    #'EmqttdMessage'{} ->
      v_msg_EmqttdMessage(Msg, ['EmqttdMessage'], TrUserData);
    _ -> mk_type_error(not_a_known_message, Msg, [])
  end.


-dialyzer({nowarn_function,v_msg_DisconnectedMessage/3}).
v_msg_DisconnectedMessage(#'DisconnectedMessage'{reason
= F1},
    Path, _) ->
  if F1 == undefined -> ok;
    true -> v_type_string(F1, [reason | Path])
  end,
  ok;
v_msg_DisconnectedMessage(X, Path, _TrUserData) ->
  mk_type_error({expected_msg, 'DisconnectedMessage'}, X,
    Path).

-dialyzer({nowarn_function,v_msg_ConnectedMessage/3}).
v_msg_ConnectedMessage(#'ConnectedMessage'{ip_address =
F1,
  conn_ack = F2, session = F3,
  protocol_version = F4},
    Path, _) ->
  if F1 == undefined -> ok;
    true -> v_type_string(F1, [ip_address | Path])
  end,
  if F2 == undefined -> ok;
    true ->
      'v_enum_ConnectedMessage.ConnAck'(F2, [conn_ack | Path])
  end,
  if F3 == undefined -> ok;
    true -> v_type_bool(F3, [session | Path])
  end,
  if F4 == undefined -> ok;
    true -> v_type_int32(F4, [protocol_version | Path])
  end,
  ok;
v_msg_ConnectedMessage(X, Path, _TrUserData) ->
  mk_type_error({expected_msg, 'ConnectedMessage'}, X,
    Path).

-dialyzer({nowarn_function,v_msg_EmqttdPresence/3}).
v_msg_EmqttdPresence(#'EmqttdPresence'{username = F1,
  client_id = F2, time = F3,
  presence = F4},
    Path, TrUserData) ->
  if F1 == undefined -> ok;
    true -> v_type_string(F1, [username | Path])
  end,
  if F2 == undefined -> ok;
    true -> v_type_string(F2, [client_id | Path])
  end,
  if F3 == undefined -> ok;
    true -> v_type_int64(F3, [time | Path])
  end,
  case F4 of
    undefined -> ok;
    {connected_message, OF4} ->
      v_msg_ConnectedMessage(OF4,
        [connected_message, presence | Path],
        TrUserData);
    {disconnected_message, OF4} ->
      v_msg_DisconnectedMessage(OF4,
        [disconnected_message, presence | Path],
        TrUserData);
    _ -> mk_type_error(invalid_oneof, F4, [presence | Path])
  end,
  ok.

-dialyzer({nowarn_function,v_msg_EmqttdMessage/3}).
v_msg_EmqttdMessage(#'EmqttdMessage'{username = F1,
  client_id = F2, topic = F3, qos = F4,
  retain = F5, dup = F6, id = F7,
  payload = F8},
    Path, _) ->
  if F1 == undefined -> ok;
    true -> v_type_string(F1, [username | Path])
  end,
  if F2 == undefined -> ok;
    true -> v_type_string(F2, [client_id | Path])
  end,
  if F3 == undefined -> ok;
    true -> v_type_string(F3, [topic | Path])
  end,
  if F4 == undefined -> ok;
    true -> v_type_int32(F4, [qos | Path])
  end,
  if F5 == undefined -> ok;
    true -> v_type_bool(F5, [retain | Path])
  end,
  if F6 == undefined -> ok;
    true -> v_type_bool(F6, [dup | Path])
  end,
  if F7 == undefined -> ok;
    true -> v_type_int32(F7, [id | Path])
  end,
  if F8 == undefined -> ok;
    true -> v_type_bytes(F8, [payload | Path])
  end,
  ok.

-dialyzer({nowarn_function,'v_enum_ConnectedMessage.ConnAck'/2}).
'v_enum_ConnectedMessage.ConnAck'('CONNACK_ACCEPT',
    _Path) ->
  ok;
'v_enum_ConnectedMessage.ConnAck'('CONNACK_PROTO_VER',
    _Path) ->
  ok;
'v_enum_ConnectedMessage.ConnAck'('CONNACK_INVALID_ID',
    _Path) ->
  ok;
'v_enum_ConnectedMessage.ConnAck'('CONNACK_SERVER',
    _Path) ->
  ok;
'v_enum_ConnectedMessage.ConnAck'('CONNACK_CREDENTIALS',
    _Path) ->
  ok;
'v_enum_ConnectedMessage.ConnAck'('CONNACK_AUTH',
    _Path) ->
  ok;
'v_enum_ConnectedMessage.ConnAck'(V, Path)
  when is_integer(V) ->
  v_type_sint32(V, Path);
'v_enum_ConnectedMessage.ConnAck'(X, Path) ->
  mk_type_error({invalid_enum,
    'ConnectedMessage.ConnAck'},
    X, Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
  when -2147483648 =< N, N =< 2147483647 ->
  ok;
v_type_sint32(N, Path) when is_integer(N) ->
  mk_type_error({value_out_of_range, sint32, signed, 32},
    N, Path);
v_type_sint32(X, Path) ->
  mk_type_error({bad_integer, sint32, signed, 32}, X,
    Path).

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
  when -2147483648 =< N, N =< 2147483647 ->
  ok;
v_type_int32(N, Path) when is_integer(N) ->
  mk_type_error({value_out_of_range, int32, signed, 32},
    N, Path);
v_type_int32(X, Path) ->
  mk_type_error({bad_integer, int32, signed, 32}, X,
    Path).

-dialyzer({nowarn_function,v_type_int64/2}).
v_type_int64(N, _Path)
  when -9223372036854775808 =< N,
  N =< 9223372036854775807 ->
  ok;
v_type_int64(N, Path) when is_integer(N) ->
  mk_type_error({value_out_of_range, int64, signed, 64},
    N, Path);
v_type_int64(X, Path) ->
  mk_type_error({bad_integer, int64, signed, 64}, X,
    Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
  mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
  try unicode:characters_to_binary(S) of
    B when is_binary(B) -> ok;
    {error, _, _} ->
      mk_type_error(bad_unicode_string, S, Path)
  catch
    error:badarg ->
      mk_type_error(bad_unicode_string, S, Path)
  end;
v_type_string(X, Path) ->
  mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
  mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
  Path2 = prettify_path(Path),
  erlang:error({gpb_type_error,
    {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
  list_to_atom(string:join(lists:map(fun atom_to_list/1,
    lists:reverse(PathR)),
    ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.




get_msg_defs() ->
  [{{enum, 'ConnectedMessage.ConnAck'},
    [{'CONNACK_ACCEPT', 0}, {'CONNACK_PROTO_VER', 1},
      {'CONNACK_INVALID_ID', 2}, {'CONNACK_SERVER', 3},
      {'CONNACK_CREDENTIALS', 4}, {'CONNACK_AUTH', 5}]},
    {{msg, 'DisconnectedMessage'},
      [#field{name = reason, fnum = 1, rnum = 2,
        type = string, occurrence = optional, opts = []}]},
    {{msg, 'ConnectedMessage'},
      [#field{name = ip_address, fnum = 1, rnum = 2,
        type = string, occurrence = optional, opts = []},
        #field{name = conn_ack, fnum = 2, rnum = 3,
          type = {enum, 'ConnectedMessage.ConnAck'},
          occurrence = optional, opts = []},
        #field{name = session, fnum = 3, rnum = 4, type = bool,
          occurrence = optional, opts = []},
        #field{name = protocol_version, fnum = 4, rnum = 5,
          type = int32, occurrence = optional, opts = []}]},
    {{msg, 'EmqttdPresence'},
      [#field{name = username, fnum = 1, rnum = 2,
        type = string, occurrence = optional, opts = []},
        #field{name = client_id, fnum = 2, rnum = 3,
          type = string, occurrence = optional, opts = []},
        #field{name = time, fnum = 3, rnum = 4, type = int64,
          occurrence = optional, opts = []},
        #gpb_oneof{name = presence, rnum = 5,
          fields =
          [#field{name = connected_message, fnum = 4, rnum = 5,
            type = {msg, 'ConnectedMessage'},
            occurrence = optional, opts = []},
            #field{name = disconnected_message, fnum = 5, rnum = 5,
              type = {msg, 'DisconnectedMessage'},
              occurrence = optional, opts = []}]}]},
    {{msg, 'EmqttdMessage'},
      [#field{name = username, fnum = 1, rnum = 2,
        type = string, occurrence = optional, opts = []},
        #field{name = client_id, fnum = 2, rnum = 3,
          type = string, occurrence = optional, opts = []},
        #field{name = topic, fnum = 3, rnum = 4, type = string,
          occurrence = optional, opts = []},
        #field{name = qos, fnum = 4, rnum = 5, type = int32,
          occurrence = optional, opts = []},
        #field{name = retain, fnum = 5, rnum = 6, type = bool,
          occurrence = optional, opts = []},
        #field{name = dup, fnum = 6, rnum = 7, type = bool,
          occurrence = optional, opts = []},
        #field{name = id, fnum = 7, rnum = 8, type = int32,
          occurrence = optional, opts = []},
        #field{name = payload, fnum = 8, rnum = 9, type = bytes,
          occurrence = optional, opts = []}]}].


get_msg_names() ->
  ['DisconnectedMessage', 'ConnectedMessage',
    'EmqttdPresence', 'EmqttdMessage'].


get_enum_names() -> ['ConnectedMessage.ConnAck'].


fetch_msg_def(MsgName) ->
  case find_msg_def(MsgName) of
    Fs when is_list(Fs) -> Fs;
    error -> erlang:error({no_such_msg, MsgName})
  end.


fetch_enum_def(EnumName) ->
  case find_enum_def(EnumName) of
    Es when is_list(Es) -> Es;
    error -> erlang:error({no_such_enum, EnumName})
  end.


find_msg_def('DisconnectedMessage') ->
  [#field{name = reason, fnum = 1, rnum = 2,
    type = string, occurrence = optional, opts = []}];
find_msg_def('ConnectedMessage') ->
  [#field{name = ip_address, fnum = 1, rnum = 2,
    type = string, occurrence = optional, opts = []},
    #field{name = conn_ack, fnum = 2, rnum = 3,
      type = {enum, 'ConnectedMessage.ConnAck'},
      occurrence = optional, opts = []},
    #field{name = session, fnum = 3, rnum = 4, type = bool,
      occurrence = optional, opts = []},
    #field{name = protocol_version, fnum = 4, rnum = 5,
      type = int32, occurrence = optional, opts = []}];
find_msg_def('EmqttdPresence') ->
  [#field{name = username, fnum = 1, rnum = 2,
    type = string, occurrence = optional, opts = []},
    #field{name = client_id, fnum = 2, rnum = 3,
      type = string, occurrence = optional, opts = []},
    #field{name = time, fnum = 3, rnum = 4, type = int64,
      occurrence = optional, opts = []},
    #gpb_oneof{name = presence, rnum = 5,
      fields =
      [#field{name = connected_message, fnum = 4, rnum = 5,
        type = {msg, 'ConnectedMessage'},
        occurrence = optional, opts = []},
        #field{name = disconnected_message, fnum = 5, rnum = 5,
          type = {msg, 'DisconnectedMessage'},
          occurrence = optional, opts = []}]}];
find_msg_def('EmqttdMessage') ->
  [#field{name = username, fnum = 1, rnum = 2,
    type = string, occurrence = optional, opts = []},
    #field{name = client_id, fnum = 2, rnum = 3,
      type = string, occurrence = optional, opts = []},
    #field{name = topic, fnum = 3, rnum = 4, type = string,
      occurrence = optional, opts = []},
    #field{name = qos, fnum = 4, rnum = 5, type = int32,
      occurrence = optional, opts = []},
    #field{name = retain, fnum = 5, rnum = 6, type = bool,
      occurrence = optional, opts = []},
    #field{name = dup, fnum = 6, rnum = 7, type = bool,
      occurrence = optional, opts = []},
    #field{name = id, fnum = 7, rnum = 8, type = int32,
      occurrence = optional, opts = []},
    #field{name = payload, fnum = 8, rnum = 9, type = bytes,
      occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('ConnectedMessage.ConnAck') ->
  [{'CONNACK_ACCEPT', 0}, {'CONNACK_PROTO_VER', 1},
    {'CONNACK_INVALID_ID', 2}, {'CONNACK_SERVER', 3},
    {'CONNACK_CREDENTIALS', 4}, {'CONNACK_AUTH', 5}];
find_enum_def(_) -> error.


enum_symbol_by_value('ConnectedMessage.ConnAck',
    Value) ->
  'enum_symbol_by_value_ConnectedMessage.ConnAck'(Value).


enum_value_by_symbol('ConnectedMessage.ConnAck', Sym) ->
  'enum_value_by_symbol_ConnectedMessage.ConnAck'(Sym).


'enum_symbol_by_value_ConnectedMessage.ConnAck'(0) ->
  'CONNACK_ACCEPT';
'enum_symbol_by_value_ConnectedMessage.ConnAck'(1) ->
  'CONNACK_PROTO_VER';
'enum_symbol_by_value_ConnectedMessage.ConnAck'(2) ->
  'CONNACK_INVALID_ID';
'enum_symbol_by_value_ConnectedMessage.ConnAck'(3) ->
  'CONNACK_SERVER';
'enum_symbol_by_value_ConnectedMessage.ConnAck'(4) ->
  'CONNACK_CREDENTIALS';
'enum_symbol_by_value_ConnectedMessage.ConnAck'(5) ->
  'CONNACK_AUTH'.


'enum_value_by_symbol_ConnectedMessage.ConnAck'('CONNACK_ACCEPT') ->
  0;
'enum_value_by_symbol_ConnectedMessage.ConnAck'('CONNACK_PROTO_VER') ->
  1;
'enum_value_by_symbol_ConnectedMessage.ConnAck'('CONNACK_INVALID_ID') ->
  2;
'enum_value_by_symbol_ConnectedMessage.ConnAck'('CONNACK_SERVER') ->
  3;
'enum_value_by_symbol_ConnectedMessage.ConnAck'('CONNACK_CREDENTIALS') ->
  4;
'enum_value_by_symbol_ConnectedMessage.ConnAck'('CONNACK_AUTH') ->
  5.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
  erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'io.emqttd'.



gpb_version_as_string() ->
  "3.26.6".

gpb_version_as_list() ->
  [3,26,6].
